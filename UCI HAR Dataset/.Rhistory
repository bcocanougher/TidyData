DateCol <- household_power_consuption[, 1]
head(DateCol)
DateCol <- as.character(DateCol)
head(DateCol)
DatesWanted <- which(DateCol == "2/2/2007"
)
DatesWanted
FirstWanted <- which(DateCol == "1/2/2007"
)
FirstWanted
PowerDateSet <- household_power_consuption[66638:69517, ]
head(PowerDateSet)
tail(PowerDateSet)
names(household_power_consuption)
HouseNames <- household_power_consuption[1, ]
HouseNames
HouseNames <- as.character(HouseNames)
HouseNames
HouseNames <- household_power_consuption[1, ]
class(HouseNames)
as.matrix(HouseNames)
as.vector(HouseNames)
HouseNames <- as.matrix(HouseNames)
HouseNames <- as.vector(HouseNames)
HouseNames
?colname
?namecol
colnames(PowerDateSet, HouseNames)
colnames(HouseNames, PowerDateSet)
?colnames
colnames(PowerDateSet) <- HouseNames
Head(PowerDateSet)
head(PowerDateSet)
?bar
bar(PowerDateSet$Global_active_power)
?plot
hist(PowerDateSet$Global_active_power)
PowerDateSet$Global_active_power
class(PowerDateSet$Global_active_power)
GlobalActivePower <- as.numeric(PowerDateSet$Global_active_power)
hist(GlobalActivePower)
hist(GlobalActivePower, col = "red")
?title
title(main = "Global Active Power", xlab = "Global Active Power (kilowatts"))
title(main = "Global Active Power", xlab = "Global Active Power (kilowatts")
hist(GlobalActivePower, col = "red"), title(main = "Global Active Power", xlab = "Global Active Power (kilowatts")
hist(GlobalActivePower, col = "red", title(main = "Global Active Power", xlab = "Global Active Power (kilowatts"))
hist(GlobalActivePower, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts")
hist(GlobalActivePower, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts"))
hist(GlobalActivePower, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
hist(GlobalActivePower, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", break = 12)
hist(GlobalActivePower, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", breaks = 12)
hist(GlobalActivePower, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", breaks = 16)
head(GlobalActivePower)
class(GlobalActivePower)
head(PowerDateSet)
d <- PowerDateSet[,3]
head(d)
class(d)
d <- as.numeric(d)
d
GlobalActivePower <- as.numeric(levels(PowerDateSet$Global_active_power))
GlobalActivePower <- as.numeric(levels(PowerDateSet$Global_active_power))[PowerDateSet$Global_active_power]
head(GlobalActivePower)
hist(GlobalActivePower, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", breaks = 16)
hist(GlobalActivePower, col = "#FF0000", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", breaks = 16)
hist(GlobalActivePower, col = "#FF0000", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", breaks = 16)
hist(GlobalActivePower, col = "#FFB2B2", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", breaks = 16)
hist(GlobalActivePower, col = "#FF1919", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", breaks = 16)
hist(GlobalActivePower, col = "#FF3300", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", breaks = 16)
?dev.copy
dev.copy(png, "figure1.png", height=1, width=1, units="in", res=480)
dev.copy(png, "figure1.png", height=1, width=1, res=480)
dev.copy(png, "figure1.png")
png("figure1.png", height=1, width=1, units="in", res=480)
dev.off()
plot(GlobalActivePower)
?line
?plot
plot(GlobalActivePower, type = "l")
days <- c(Thu, Fri, Sat)
days <- c("Thu", "Fri", "Sat")
plot(GlobalActivePower, days, type = "l")
plot(GlobalActivePower, type = "l", breaks = 3)
axis(1, days)
axis(1, lab = days)
axis(1, at=1.5, lab = days)
axis(3, at=1.5, lab = days)
axis(3, at=3, lab = days)
days
axis(3, at=3, lab = c("Thu", "Fri", "Sat"))
axis(1, at=1.5, lab = c("Thu", "Fri", "Sat"))
?axis
axis(1, labels = c("Thu", "Fri", "Sat"))
axis(1, at = 3, labels = c("Thu", "Fri", "Sat"))
axis(1, at = 1:3, labels = c("Thu", "Fri", "Sat"))
plot(GlobalActivePower, type = "l", axis(1, at = 1:3, labels = c("Thu", "Fri", "Sat")))
plot(GlobalActivePower, type = "l", xlab = NULL, ylab = "Global Acive Power (kilowatts)")
plot(GlobalActivePower, type = "l", xlab = "", ylab = "Global Acive Power (kilowatts)")
plot(GlobalActivePower, type = "l", xlab = "", ylab = "Global Acive Power (kilowatts)", xaxt = "n")
axis(1, at=1:3, labels = c("Thu", "Fri", "Sat"))
axis(1, at=10:100, labels = c("Thu", "Fri", "Sat"))
axis(1, at=c(1, 960. 1920), labels = c("Thu", "Fri", "Sat"))
axis(1, at=c(1, 960, 1920), labels = c("Thu", "Fri", "Sat"))
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
plot(GlobalActivePower, type = "l", xlab = "",
ylab = "Global Acive Power (kilowatts)", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
names(household_power_consuption)
head(PowerDateSet)
?holdon
sub1 <- PowerDateSet[, 7]
head(sub1)
GlobalActivePower2 <- as.numeric(PowerDateSet$Global_active_power)
GlobalActivePower2 <- as.numeric(levels(PowerDateSet$Global_active_power))[PowerDateSet$Global_active_power]
sub1 <- as.numeric(levels(PowerDateSet$Sub_metering_1))[PowerDateSet$Sub_metering_1]
head(sub1)
sub2 <- as.numeric(levels(PowerDateSet$Sub_metering_2))[PowerDateSet$Sub_metering_2]
sub3 <- as.numeric(levels(PowerDateSet$Sub_metering_3))[PowerDateSet$Sub_metering_3]
plot(sub1 +sub2 +sub3)
plot(sub1, type = "l")
plot(sub1, sub2, sub3, type = "l")
?plot
plot(c(sub1, sub2, sub3), type = "l")
?plot
plot(sub1, type = "l")
lines(sub2, type = "l")
lines(sub3, type = "l")
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
?pch
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), lty = c(1, 1, 1), lwd = c(2.5, 2.5), col = c('black', 'red', 'blue'))
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), col = c('black', 'red', 'blue'))
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
?legend
legend("topright", inset = 1, c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
legend("topright", inset = 6, c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
legend("topright", inset = 200, c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.5)
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.5)
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.75)
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.5)
?mfr
par(mfcol = c(2, 2)
)
plot(GlobalActivePower, type = "l", xlab = "",
ylab = "Global Acive Power (kilowatts)", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.5)
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
plot(GlobalActivePower, type = "l", xlab = "",
ylab = "Global Acive Power (kilowatts)", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.5)
par(mfrow=1)
?par
plot
plot(x)
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.5)
par(mfrow=c(1,1))
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.5)
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'))
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.75)
plot(sub1, type = "l", xlab = "", ylab = "Energy sub metering", xaxt = "n")
axis(1, at=c(1, 1440, 2880), labels = c("Thu", "Fri", "Sat"))
lines(sub2, type = "l", col = "red")
lines(sub3, type = "l", col = "blue" )
legend("topright", c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1, 1, 1), lwd = c(1, 1), col = c('black', 'red', 'blue'), cex = 0.5)
head(df)
rm(list=ls())
testdata <- read.table("./body_acc_x_test.txt")
testdata <- read.table("./UCI HAR Dataset/test/Inertial Signals/body_acc_x_test.txt")
head(testdata)
rm(testdata)
load("~/Desktop/RCoursera/UCI HAR Dataset/UCI data.RData")
testtrain <- rbind(testxtest, trainxtrain)
colnames(testxtest) <- features2
colnames(trainxtrain) <- features2
testtrain <- rbind(testxtest, trainxtrain)
rm(features)
rm(testxtest)
rm(trainxtrain)
rbind(testytest, trainytrain)
ytesttrain <- rbind(testytest, trainytrain)
class(ytesttrain)
rownames(testtrain) <- ytesttrain
ytesttrain <- as.vector(rbind(testytest, trainytrain))
class(ytesttrain)
ytesttrain <- as.character(rbind(testytest, trainytrain))
rownames(testtrain) <- ytesttrain
dim(ytesttrain)
head(ytesttrain)
ytesttrain <- as.numeric(rbind(testytest, trainytrain))
class(testytest)
head(testytest)
head(testytest[,1])
ytesttrain <- rbind(testytest, trainytrain)
ytesttrain <- as.character(ytesttrain[,1])
ytesttrain <- rbind(testytest, trainytrain)
ytesttrain <- as.character(ytesttrain[,1])
rownames(testtrain) <- ytesttrain
class(ytesttrain)
head(testtrain)
head(testsubtest)
head(featurestestx)
rm(featurestestx)
head(testsubtest)
rm(list=ls()
)
rm(testdata)
source('~/Desktop/RCoursera/readprog2.R')
str(tidydata)
tidydata <- cbind(testtrainsub, tidydata)
str(tidydata)
colnames(tidydata)[1] <- "Subject_ID_Number"
str(tidydata)
colnames(tidydata)[c(1,2)] <- c("Subject_ID_Number", "Activity_ID")
str(tidydata)
rm(testtrainsub)
library(dplyr)
?select
tidydatameanstd <- select(tidydata, contains("mean") & contains("std"))
tidydatamean <- select(tidydata, contains("mean"))
names(tidydata)
tidydatamean <- select(tidydata, -contains("mean"))
tidydatamean <- select(tidydata, -matches("mean"))
meanStdColumns <- grep("mean|std", tidydata, value = FALSE)
rm(meanStdColumns)
tidydata[, 400:420]
x <- tidydata[!duplicated(names(tidydata))]
x2 <- names(tidydata[duplicated(names(tidydata))])
x2
tidydataMeanSTD <- tidydata[!duplicated(names(tidydata))]
rm(x)
tidydatameanstd <- select(tidydata, contains("mean") & contains("std"))
tidydatamMeanSTD <- select(tidydataMeanSTD, contains("mean") & contains("std"))
tidydatamMeanSTD <- select(tidydataMeanSTD, contains("mean"))
tidydatamMeanSTD <- select(tidydataMeanSTD, contains("mean" | "std"))
tidydatamMeanSTD <- select(tidydataMeanSTD, contains("mean"), contains("std"))
names(tidydatamMeanSTD)
tidydatamMeanSTD <- select(tidydataMeanSTD, contains("mean"), contains("std"), contains("Activity"), contains("Subject"))
names(tidydatamMeanSTD)
tidydatamMeanSTD[,87]
labels <- read.table("activity_labels.txt")
labels
labels[,2]
labels <- labels[,2]
actlabels <- labels[,2]
actlabels <- labels
tidydataMeanSTD$Activity_ID <- factor(tidydataMeanSTD$Activity_ID,
levels = c(1,2,3,4,5,6),
labels = actlabels)
tidydatamMeanSTD$Activity_ID <- factor(tidydataMeanSTD$Activity_ID,
levels = c(1,2,3,4,5,6),
labels = actlabels)
tidydatamMeanSTD[,87]
actlabels
class(actlabels)
as.character(actlabels)
actlabels <- as.character(actlabels)
tidydatamMeanSTD$Activity_ID <- factor(tidydataMeanSTD$Activity_ID,
levels = c(1,2,3,4,5,6),
labels = actlabels)
tidydatamMeanSTD[,87]
tidydataMeanSTD <- tidydata[!duplicated(names(tidydata))]
tidydataMeanSTD <- select(tidydataMeanSTD, contains("mean"), contains("std"))
tidydataMeanSTD$Activity_ID <- factor(tidydataMeanSTD$Activity_ID,
levels = c(1,2,3,4,5,6),
labels = actlabels)
class(tidydataMeanSTD$Activity_ID)
tidydataMeanSTD <- tidydata[!duplicated(names(tidydata))]
tidydataMeanSTD <- select(tidydataMeanSTD, contains("mean"), contains("std"))
class(tidydataMeanSTD$Activity_ID)
class(tidydataMeanSTD$Activity_ID)
tidydataMeanSTD$Activity_ID
tidydataMeanSTD <- tidydata[!duplicated(names(tidydata))]
tidydatamMeanSTD <- select(tidydataMeanSTD, contains("mean"), contains("std"),
contains("Activity"), contains("Subject"))
class(tidydataMeanSTD$Activity_ID)
tidydataMeanSTD$Activity_ID <- factor(tidydataMeanSTD$Activity_ID,
levels = c(1,2,3,4,5,6),
labels = actlabels)
class(tidydataMeanSTD$Activity_ID)
tidydataMeanSTD$Activity_ID
str(tidydataMeanSTD)
tidydataMeanSTD$Activity_ID
rm(tidydata)
rm(tidydatamMeanSTD)
rm(actlabels)
rm(labels)
rm(x2)
names(tidydataMeanSTD)
rm(tidydataMeanSTD)
source('~/Desktop/RCoursera/readprog2.R')
source('~/Desktop/RCoursera/readprog2.R')
source('~/Desktop/RCoursera/readprog2.R')
#Creating all of the data frames needed before stitched together:
features <- read.table("features.txt")
testxtest <- read.table("test/X_test.txt")
testsubtest <- read.table("test/subject_test.txt")
testytest <- read.table("test/y_test.txt")
#and train data
trainytrain <- read.table("train//y_train.txt")
trainxtrain <- read.table("train/X_train.txt")
trainsubtrain <- read.table("train/subject_train.txt")
#put the training and test data together
testtrainsub <- rbind(testsubtest, trainsubtrain)
#get rid of old variables eating memory
rm(testsubtest)
rm(trainsubtrain)
#put together x data
testtrainx <- rbind(testxtest, trainxtrain)
rm(testxtest)
rm(trainxtrain)
#put together y data
testtrainy <- rbind(testytest, trainytrain)
rm(testytest)
rm(trainytrain)
#need to make features into a character vector so we can bind it
features <- as.character(features[,2])
#then label the testxtest data.table with the features labels
colnames(testtrainx) <- features
rm(features)
#now we need to add the testtrainy as the first column of our big data set
tidydata <- cbind(testtrainy, testtrainx)
rm(testtrainx)
rm(testtrainy)
#Add the test and training subject number to tidy data
tidydata <- cbind(testtrainsub, tidydata)
rm(testtrainsub)
#rename the first two columns
colnames(tidydata)[c(1,2)] <- c("Subject_ID_Number", "Activity_ID")
#------------------------------------------------------------------------------------
# Part 2:
#
# Now, I will extract only the mean and standard deviation for each measurement
# from the tidydata data frame.
#
#------------------------------------------------------------------------------------
# The select function in the dplyr package will not work with duplicated names.
# So first, we can remove these rows:
tidydataMeanSTD <- tidydata[!duplicated(names(tidydata))]
# Select only columns with mean or std and also the activity and subject columns.
tidydatamMeanSTD <- select(tidydataMeanSTD, contains("mean"), contains("std"),
contains("Activity"), contains("Subject"))
#------------------------------------------------------------------------------------
# Part 3:
#
# Name the activities in the data set.
#
#------------------------------------------------------------------------------------
#First we need to extract the activity label key from the UCI folder
actlabels <- read.table("activity_labels.txt")
actlabels <- actlabels[,2]
actlabels <- as.character(actlabels)
# Now we can convert the integers in the Activity_ID column into factors and
# name those levels as the appropriate labels.
tidydataMeanSTD$Activity_ID <- factor(tidydataMeanSTD$Activity_ID,
levels = c(1,2,3,4,5,6),
labels = actlabels)
tidydataMeanSTD <- select(tidydataMeanSTD, contains("mean"), contains("std"),
contains("Activity"), contains("Subject"))
names(tidydataMeanSTD)
?transmutate
?mutate
tidyaverages <- apply(tidydataMeanSTD[,1:86], 2, mean)
tidyaverages
class(tidyaverages)
?filer
?filter
tidyBySubject <- filter(tidydataMeanSTD, "Subject_ID_Number")
names(tidydataMeanSTD)
tidyBySubject <- arrange(tidydataMeanSTD, "Subject_ID_Number")
tidyBySubject <- arrange(tidydataMeanSTD, Subject_ID_Number)
tidyBySubject[,87]
tidyBySubject[,88]
class(tidyBySubject[,88])
factorvect <- as.factor(tidyBySubject[,88])
class(factorvect)
tidyBySubject[,88] <- as.factor(tidyBySubject[,88])
class(tidyBySubject[,88])
tidyBySubject[,88]
?tapply
averBySubject <- tapply(tidyBySubject, index = tidyBySubject[,88], FUN = mean)
averBySubject <- tapply(tidyBySubject, INDEX =  = tidyBySubject[,88], FUN = mean)
averBySubject <- tapply(tidyBySubject, INDEX = tidyBySubject[,88], FUN = mean)
library(reshape2)
View(tidyBySubject)
x <- melt(setDT(tidyBySubject), id.vars = "Subject_ID_Number", measure.vars = cols)[, mean(value), by = Subject_ID_Number]
library(data.table)
x <- melt(setDT(tidyBySubject), id.vars = "Subject_ID_Number", measure.vars = cols)[, mean(value), by = Subject_ID_Number]
newdata <- NULL
for (Subject_ID_Number in unique(tidyBySubject$Subject_ID_Number)){
rowIndex <- which(tidyBySubject$Subject_ID_Number == Subject_ID_Number)
result <- colMeans(tidyBySubject[rowIndex,])
newdata[Subject_ID_Number, ]<-result
}
rm(Subject_ID_Number)
newdata <- NULL
for (Subject_ID_Number in unique(tidyBySubject$Subject_ID_Number)){
rowIndex <- which(tidyBySubject$Subject_ID_Number == Subject_ID_Number)
result <- colMeans(tidyBySubject[rowIndex,])
newdata[Subject_ID_Number, ]<-result
}
rm(Subject_ID_Number)
factorvect <- as.numeric(tidyBySubject[,88])
class(tidyBySubject$Subject_ID_Number)
tidyBySubject[,88] <- as.numeric(tidyBySubject[,88])
class(tidyBySubject$Subject_ID_Number)
tidyBySubject <- arrange(tidydataMeanSTD, Subject_ID_Number)
class(tidyBySubject$Subject_ID_Number)
newdata <- NULL
for (Subject_ID_Number in unique(tidyBySubject$Subject_ID_Number)){
rowIndex <- which(tidyBySubject$Subject_ID_Number == Subject_ID_Number)
result <- colMeans(tidyBySubject[rowIndex,])
newdata[Subject_ID_Number, ]<-result
}
head(rowIndex)
rowIndex
Subject_ID_Number in unique(tidyBySubject$Subject_ID_Number)
unique(tidyBySubject$Subject_ID_Number)
?setDT
setDT(tidyBySubject)[, mean(c(1:86)), by=Subject_ID_Number]
rm(Subject_ID_Number)
setDT(tidyBySubject)[, mean(c(1:86)), by=Subject_ID_Number]
?group_by
?rm
rm(tidyaverages, tidydata)
tm(tidydatamMeanSTD, tidydatamMeanSTD)
rm(tidydatamMeanSTD, tidydatamMeanSTD)
rm(tidydataMeanSTD)
rm(actlabels, factorvect, newdata, rowIndex)
save.image("~/Desktop/RCoursera/UCI HAR Dataset/tidyBySubject.RData")
